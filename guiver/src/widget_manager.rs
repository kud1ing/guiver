use crate::font::Font;
use crate::stroke::Stroke;
use crate::{
    GridColumnProperties, GridRowProperties, HorizontalAlignment, PaintBrush, Size,
    VerticalAlignment, WidgetId,
};
use druid_shell::kurbo::Rect;
use std::any::Any;

/// A command to the widget manager or widgets.
#[derive(Debug)]
pub enum Command<EVENT> {
    /// Adds the child widget with the given ID to the parent widget.
    AddChild {
        parent_widget_id: WidgetId,
        widget_placement: Option<WidgetPlacement>,
        child_widget_id: WidgetId,
    },
    /// Adds widget event observation: if a widget event of type `WidgetEventType` occurs in the
    /// widget with the given ID, it produces a value of type `WidgetEvent::Custom(EVENT)` in
    /// `handle_event()`.
    AddEventObservation(WidgetId, WidgetEventType, EVENT),
    /// Adds the child widgets to the parent widget.
    AddChildren {
        parent_widget_id: WidgetId,
        child_widgets: Vec<(Option<WidgetPlacement>, WidgetId)>,
    },
    /// Creates a widget with the given ID and type.
    CreateWidget(WidgetId, WidgetType),
    /// Destroys the widget with the given ID.
    Destroy(WidgetId),
    /// Removes the child widget with the given ID from the parent widget.
    RemoveChild {
        parent_widget_id: WidgetId,
        child_widget_id: WidgetId,
        destroy_child_widget: bool,
    },
    /// Removes the widget's child widgets.
    RemoveChildren {
        parent_widget_id: WidgetId,
        destroy_child_widgets: bool,
    },
    /// Removes observation of the given widget's event.
    RemoveEventObservation(WidgetId, WidgetEventType),
    /// Enables/disables debug rendering mode for the widget.
    SetDebugRendering(WidgetId, bool),
    /// Sets/unsets the widget's fill.
    SetFill(WidgetId, Option<PaintBrush>),
    /// Sets the widget's font.
    SetFont(WidgetId, Font),
    /// Gives/removes focus to the widget.
    SetHasFocus(WidgetId, bool),
    /// Sets the widget's horizontal alignment.
    SetHorizontalAlignment(WidgetId, HorizontalAlignment),
    /// Enables/disables the widget.
    SetIsDisabled(WidgetId, bool),
    /// Hides/shows the widget.
    SetIsHidden(WidgetId, bool),
    /// Makes the widget with the given ID the main widget.
    SetMainWidget(WidgetId),
    /// Sets/unsets the widget's stroke.
    SetStroke(WidgetId, Option<Stroke>),
    /// Sets the given value to the widget.
    SetValue(WidgetId, Box<dyn Any>),
    /// Sets the widget's vertical alignment.
    SetVerticalAlignment(WidgetId, VerticalAlignment),
}

impl<EVENT: Clone> Command<EVENT> {
    /// Returns the ID of the receiver widget.
    pub fn widget_id(&self) -> &WidgetId {
        match self {
            Command::AddChild {
                parent_widget_id, ..
            } => parent_widget_id,
            Command::AddChildren {
                parent_widget_id, ..
            } => parent_widget_id,
            Command::AddEventObservation(widget_id, _, _) => widget_id,
            Command::CreateWidget(widget_id, _) => widget_id,
            Command::Destroy(widget_id) => widget_id,
            Command::RemoveChild {
                parent_widget_id, ..
            } => parent_widget_id,
            Command::RemoveChildren {
                parent_widget_id, ..
            } => parent_widget_id,
            Command::RemoveEventObservation(widget_id, _) => widget_id,
            Command::SetDebugRendering(widget_id, _) => widget_id,
            Command::SetFill(widget_id, _) => widget_id,
            Command::SetFont(widget_id, _) => widget_id,
            Command::SetHasFocus(widget_id, _) => widget_id,
            Command::SetHorizontalAlignment(widget_id, _) => widget_id,
            Command::SetIsDisabled(widget_id, _) => widget_id,
            Command::SetIsHidden(widget_id, _) => widget_id,
            Command::SetMainWidget(widget_id) => widget_id,
            Command::SetStroke(widget_id, _) => widget_id,
            Command::SetValue(widget_id, _) => widget_id,
            Command::SetVerticalAlignment(widget_id, _) => widget_id,
        }
    }
}

// =================================================================================================

///
#[derive(Debug)]
pub enum WidgetError {
    NoSuchChildWidget {
        parent_widget_id: WidgetId,
        child_widget_id: WidgetId,
    },
    NoSuchWidget(WidgetId),
    NotHandled {
        widget_id: WidgetId,
        description: String,
    },
    WidgetExistsAlready(WidgetId),
}

// =================================================================================================

/// An event generated by a widget.
#[derive(Clone, Debug)]
pub enum WidgetEvent<EVENT: Clone> {
    Custom(EVENT),
    GainedFocus(WidgetId),
    LostFocus(WidgetId),
}

/// The type of an event generated by a widget.
#[derive(Clone, Debug, Eq, Hash, PartialEq)]
pub enum WidgetEventType {
    /// The widget was clicked.
    Clicked,
    /// The widget gained focus.
    GainedFocus,
    /// The widget lost focus.
    LostFocus,
    /// The widget was submitted, e.g. by pressing Enter on a text input.
    Submitted,
    /// The widget's value was changed.
    ValueChanged,
}

// =================================================================================================

/// A widget manager decouples widgets from the business logic via `WidgetId`s and `Command`s.
///
/// In addition it can and probably should handle:
/// * a window's main widget
/// * widget focus, including tab/focus order
/// * widget event subscriptions (mapping of `WidgetEvent`s to high-level events)
/// * clipboard interaction
/// * widget styling
pub trait WidgetManager<EVENT> {
    ///
    fn handle_command(&mut self, command: Command<EVENT>) -> Result<(), WidgetError> {
        self.handle_commands(vec![command])
    }

    ///
    fn handle_commands(&mut self, commands: Vec<Command<EVENT>>) -> Result<(), WidgetError>;

    /// Returns a widget's rectangle.
    fn rectangle(&self, widget_id: WidgetId) -> Result<Rect, WidgetError>;

    ///
    fn resize(&mut self, size: Size);

    /// Returns a widget's selected value.
    fn selected_value(&self, widget_id: WidgetId) -> Result<Option<Box<dyn Any>>, WidgetError>;

    /// Returns a widget's value.
    fn value(&self, widget_id: WidgetId) -> Result<Option<Box<dyn Any>>, WidgetError>;
}

// =================================================================================================

///
#[derive(Debug)]
pub enum WidgetPlacement {
    After(WidgetsLocation),
    Before(WidgetsLocation),
    Custom(Box<dyn Any>),
    Grid {
        column_index: usize,
        row_index: usize,
    },
}

// =================================================================================================

///
#[derive(Clone, Debug)]
pub enum WidgetsLocation {
    Column(usize),
    FirstColumn,
    FirstRow,
    LastColumn,
    LastRow,
    Row(usize),
}

// =================================================================================================

///
#[derive(Clone, Debug)]
pub enum WidgetType {
    Center,
    Column,
    Expanded {
        flex_factor: u16,
    },
    Grid {
        column_properties: GridColumnProperties,
        row_properties: GridRowProperties,
    },
    Hyperlink(String),
    Padding,
    Placeholder {
        maximum_size: Size,
    },
    Row,
    SizedBox {
        desired_size: Size,
    },
    Text(String),
    TextButton(String),
    TextInput {
        text: String,
        width: f64,
    },
}
