use crate::font::Font;
use crate::stroke::Stroke;
use crate::{
    GridColumnProperties, GridRowProperties, HorizontalAlignment, PaintBrush, Size,
    VerticalAlignment,
};
use druid_shell::kurbo::Rect;
use std::any::Any;

/// A command to the widget manager or widgets.
#[derive(Debug)]
pub enum Command<T> {
    /// Adds the child widget with the given ID to the parent widget.
    AddChild {
        parent_widget_id: WidgetId,
        widget_placement: Option<WidgetPlacement>,
        child_widget_id: WidgetId,
    },
    /// Adds the child widgets to the parent widget.
    AddChildren {
        parent_widget_id: WidgetId,
        child_widgets: Vec<(Option<WidgetPlacement>, WidgetId)>,
    },
    /// Destroys the widget with the given ID.
    Destroy(WidgetId),
    /// Removes the child widget with the given ID from the parent widget.
    RemoveChild {
        parent_widget_id: WidgetId,
        child_widget_id: WidgetId,
        destroy_child_widget: bool,
    },
    /// Removes the widget's child widgets.
    RemoveChildren {
        parent_widget_id: WidgetId,
        destroy_child_widgets: bool,
    },
    /// Enables/disables debug rendering mode for the widget.
    SetDebugRendering(WidgetId, bool),
    /// Sets/unsets the widget's fill.
    SetFill(WidgetId, Option<PaintBrush>),
    /// Sets the widget's font.
    SetFont(WidgetId, Font),
    /// Gives/removes focus to the widget.
    SetHasFocus(WidgetId, bool),
    /// Sets the widget's horizontal alignment.
    SetHorizontalAlignment(WidgetId, HorizontalAlignment),
    /// Enables/disables the widget.
    SetIsDisabled(WidgetId, bool),
    /// Hides/shows the widget.
    SetIsHidden(WidgetId, bool),
    /// Makes the widget with the given ID the main widget.
    SetMainWidget(WidgetId),
    /// Sets/unsets the widget's stroke.
    SetStroke(WidgetId, Option<Stroke>),
    /// Sets the given value to the widget.
    SetValue(WidgetId, Box<dyn Any>),
    /// Sets the widget's vertical alignment.
    SetVerticalAlignment(WidgetId, VerticalAlignment),
    /// Subscribes to the given widget and widget event type so that it can be handled as `T` using
    /// `handle_subscribed_widget_event()`.
    SubscribeEvent(WidgetId, WidgetEventType, T),
}

impl<T> Command<T> {
    /// Returns the ID of the receiver widget.
    pub fn widget_id(&self) -> &WidgetId {
        match self {
            Command::AddChild {
                parent_widget_id, ..
            } => parent_widget_id,
            Command::AddChildren {
                parent_widget_id, ..
            } => parent_widget_id,
            Command::Destroy(widget_id) => widget_id,
            Command::RemoveChild {
                parent_widget_id, ..
            } => parent_widget_id,
            Command::RemoveChildren {
                parent_widget_id, ..
            } => parent_widget_id,
            Command::SetDebugRendering(widget_id, _) => widget_id,
            Command::SetFill(widget_id, _) => widget_id,
            Command::SetFont(widget_id, _) => widget_id,
            Command::SetHasFocus(widget_id, _) => widget_id,
            Command::SetHorizontalAlignment(widget_id, _) => widget_id,
            Command::SetIsDisabled(widget_id, _) => widget_id,
            Command::SetIsHidden(widget_id, _) => widget_id,
            Command::SetMainWidget(widget_id) => widget_id,
            Command::SetStroke(widget_id, _) => widget_id,
            Command::SetValue(widget_id, _) => widget_id,
            Command::SetVerticalAlignment(widget_id, _) => widget_id,
            Command::SubscribeEvent(widget_id, _, _) => widget_id,
        }
    }
}

// =================================================================================================

///
pub type WidgetId = usize;

// =================================================================================================

///
#[derive(Debug)]
pub enum WidgetError {
    NoSuchChildWidget {
        parent_widget_id: WidgetId,
        child_widget_id: WidgetId,
    },
    NoSuchWidget(WidgetId),
    NotHandled {
        widget_id: WidgetId,
        description: String,
    },
}

// =================================================================================================

/// An event generated by a widget.
pub type WidgetEvent = (WidgetId, WidgetEventType);

/// The type of an event generated by a widget.
#[derive(Debug, Eq, Hash, PartialEq)]
pub enum WidgetEventType {
    /// The widget was clicked.
    Clicked,
    /// The widget gained focus.
    GainedFocus,
    /// The widget lost focus.
    LostFocus,
    /// The widget was submitted, e.g. by pressing Enter on a text input.
    Submitted,
    /// The widget's value was changed.
    ValueChanged,
}

// =================================================================================================

///
#[derive(Clone, Debug)]
pub enum WidgetsLocation {
    Column(usize),
    FirstColumn,
    FirstRow,
    LastColumn,
    LastRow,
    Row(usize),
}

// =================================================================================================

///
#[derive(Debug)]
pub enum WidgetPlacement {
    After(WidgetsLocation),
    Before(WidgetsLocation),
    Custom(Box<dyn Any>),
    Grid {
        column_index: usize,
        row_index: usize,
    },
}

// =================================================================================================

pub trait WidgetManager<T> {
    ///
    fn handle_command(&mut self, command: Command<T>) -> Result<(), WidgetError> {
        self.handle_commands(vec![command])
    }

    ///
    fn handle_commands(&mut self, commands: Vec<Command<T>>) -> Result<(), WidgetError>;

    ///
    fn new_center(&mut self) -> WidgetId;

    ///
    fn new_column(&mut self) -> WidgetId;

    ///
    fn new_expanded(&mut self, flex_factor: u16) -> WidgetId;

    ///
    fn new_grid(
        &mut self,
        column_properties: GridColumnProperties,
        row_properties: GridRowProperties,
    ) -> WidgetId;

    ///
    fn new_hyper_link(&mut self, text: String) -> WidgetId;

    ///
    fn new_padding(&mut self) -> WidgetId;

    ///
    fn new_placeholder(&mut self, maximum_size: Size) -> WidgetId;
    ///
    fn new_row(&mut self) -> WidgetId;

    ///
    fn new_sized_box(&mut self, desired_size: Size) -> WidgetId;

    ///
    fn new_text(&mut self, text: String) -> WidgetId;

    ///
    fn new_text_button(&mut self, text: String) -> WidgetId;

    ///
    fn new_text_input(&mut self, text: String, width: f64) -> WidgetId;

    /// Returns a widget's rectangle.
    fn rectangle(&self, widget_id: WidgetId) -> Result<Rect, WidgetError>;

    ///
    fn resize(&mut self, size: Size);

    /// Returns a widget's selected value.
    fn selected_value(&self, widget_id: WidgetId) -> Result<Option<Box<dyn Any>>, WidgetError>;

    /// Returns a widget's value.
    fn value(&self, widget_id: WidgetId) -> Result<Option<Box<dyn Any>>, WidgetError>;
}
