mod button;
mod label;
pub mod layout;
mod placeholder;

use crate::widget_manager::WidgetBox;
use crate::{SizeConstraints, SystemEvent};
use druid_shell::kurbo::{Point, Size};
use druid_shell::piet;
use druid_shell::Region;
pub use label::Label;
pub use placeholder::Placeholder;
use std::any::Any;

///
pub type WidgetId = usize;

/// A command to a widget.
pub enum WidgetCommand {
    /// Append the child widget.
    AppendChild(WidgetBox),
    /// Remove the widget's children.
    Clear,
    /// Remove the child widget.
    RemoveChild(WidgetId),
    /// Gives/removes focus to the widget.
    SetHasFocus(bool),
    /// Enables/disables the widget.
    SetIsDisabled(bool),
    /// Hides/shows the widget.
    SetIsHidden(bool),
    /// Sets the given value to the widget.
    SetValue(Box<dyn Any>),
}

///
pub enum WidgetError {
    CommandNotHandled(WidgetId, WidgetCommand),
    NoSuchWidget(WidgetId),
}

/// An event generated by a widget.
#[derive(Clone, Debug)]
pub enum WidgetEvent {
    Clicked(WidgetId),
    ValueChanged(WidgetId),
}

///
pub trait Widget {
    ///
    fn apply_size_constraints(&mut self, size_constraints: SizeConstraints) -> Size;

    ///
    fn handle_command(&mut self, widget_command: WidgetCommand) -> Result<(), WidgetError>;

    ///
    fn handle_event(&mut self, system_event: &SystemEvent, widget_events: &mut Vec<WidgetEvent>);

    ///
    fn paint(&self, piet: &mut piet::Piet, region: &Region);

    ///
    fn set_origin(&mut self, origin: Point);

    ///
    fn widget_id(&self) -> &WidgetId;
}
