mod button;
mod core;
mod hyperlink;
pub mod layout;
mod placeholder;
mod text;
mod text_input;

pub use self::core::WidgetCore;
use crate::stroke::Stroke;
use crate::widget_manager::WidgetBox;
use crate::{Event, Font, HorizontalAlignment, Rect, SizeConstraints, VerticalAlignment};
pub use button::Button;
use druid_shell::kurbo::{Point, Size};
use druid_shell::piet;
use druid_shell::Region;
pub use hyperlink::Hyperlink;
use piet::PaintBrush;
pub use placeholder::Placeholder;
use std::any::Any;
use std::cell::RefCell;
use std::fmt::{Debug, Formatter};
pub use text::Text;
pub use text_input::TextInput;

///
pub type WidgetId = usize;

/// A command to a widget.
pub enum WidgetCommand {
    /// Adds the given child widget.
    AddChild(Option<WidgetPlacement>, WidgetBox),
    /// Remove all of the widget's child widgets.
    RemoveAllChildren,
    /// Remove the child widget with the given ID.
    RemoveChild(WidgetId),
    /// Sets/replaces the child widget at the given location.
    SetChild {
        column_index: usize,
        row_index: usize,
        child_widget: WidgetBox,
    },
    /// Enables/disables debug rendering mode.
    SetDebugRendering(bool),
    /// Sets/unsets the widget's fill.
    SetFill(Option<PaintBrush>),
    /// Sets the widget's font.
    SetFont(Font),
    /// Gives/removes focus to the widget.
    SetHasFocus(bool),
    /// Sets the widget's horizontal alignment.
    SetHorizontalAlignment(HorizontalAlignment),
    /// Enables/disables the widget.
    SetIsDisabled(bool),
    /// Hides/shows the widget.
    SetIsHidden(bool),
    /// Sets/unsets the widget's stroke.
    SetStroke(Option<Stroke>),
    /// Sets the given value to the widget.
    SetValue(Box<dyn Any>),
    /// Sets the widget's vertical alignment.
    SetVerticalAlignment(VerticalAlignment),
}

impl Debug for WidgetCommand {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        match self {
            WidgetCommand::AddChild(widget_placement, widget_box) => {
                write!(
                    f,
                    "WidgetCommand::AppendChild({:?}, {:?})",
                    widget_placement,
                    RefCell::borrow(widget_box).widget_id()
                )
            }
            WidgetCommand::RemoveAllChildren => {
                write!(f, "WidgetCommand::RemoveAllChildren")
            }
            WidgetCommand::RemoveChild(_) => {
                write!(f, "WidgetCommand::RemoveChild(...)")
            }
            WidgetCommand::SetChild { .. } => {
                write!(f, "WidgetCommand::SetChild {{...}}")
            }
            WidgetCommand::SetDebugRendering(_) => {
                write!(f, "WidgetCommand::SetDebugRendering(...)")
            }
            WidgetCommand::SetFill(_) => {
                write!(f, "WidgetCommand::SetFill(...)")
            }
            WidgetCommand::SetFont(_) => {
                write!(f, "WidgetCommand::SetFont(...)")
            }
            WidgetCommand::SetHasFocus(_) => {
                write!(f, "WidgetCommand::SetHasFocus(...)")
            }
            WidgetCommand::SetHorizontalAlignment(_) => {
                write!(f, "WidgetCommand::SetHorizontalAlignment(...)")
            }
            WidgetCommand::SetIsDisabled(_) => {
                write!(f, "WidgetCommand::SetIsDisabled(...)")
            }
            WidgetCommand::SetIsHidden(_) => {
                write!(f, "WidgetCommand::SetIsHidden(...)")
            }
            WidgetCommand::SetStroke(_) => {
                write!(f, "WidgetCommand::SetStroke(...)")
            }
            WidgetCommand::SetValue(_) => {
                write!(f, "WidgetCommand::SetValue(...)")
            }
            WidgetCommand::SetVerticalAlignment(_) => {
                write!(f, "WidgetCommand::SetVerticalAlignment(...)")
            }
        }
    }
}

// =================================================================================================

///
#[derive(Debug)]
pub enum WidgetError {
    NoSuchWidget(WidgetId),
    NotHandled,
}

// =================================================================================================

/// An event generated by a widget.
#[derive(Debug)]
pub enum WidgetEvent {
    /// The widget was clicked.
    Clicked(WidgetId),
    /// The widget gained focus.
    GainedFocus(WidgetId),
    /// The widget lost focus.
    LostFocus(WidgetId),
    /// The widget was submitted, e.g. by pressing Enter on a text input.
    Submitted(WidgetId),
    /// The widget's value was changed.
    ValueChanged(WidgetId, Box<dyn Any>),
}

// =================================================================================================

///
#[derive(Clone, Debug)]
pub enum WidgetsLocation {
    Column(usize),
    LastColumn,
    LastRow,
    Row(usize),
}

// =================================================================================================

///
#[derive(Clone, Debug)]
pub enum WidgetPlacement {
    Above(WidgetsLocation),
    Below(WidgetsLocation),
    LeftOf(WidgetsLocation),
    RightOf(WidgetsLocation),
}

// =================================================================================================

/// The widget trait
///
/// A widget should try to be as small as possible.
pub trait Widget {
    ///
    fn add_child(
        &mut self,
        _widget_placement: Option<WidgetPlacement>,
        _child_widget: WidgetBox,
    ) -> Result<(), WidgetError> {
        Err(WidgetError::NotHandled)
    }

    ///
    fn apply_size_constraints(&mut self, size_constraints: SizeConstraints) -> Size;

    /// Returns the widget's flex factor.
    fn flex_factor(&self) -> u16 {
        0
    }

    /// Let the widget handle the given event.
    fn handle_event(&mut self, event: &Event, widget_events: &mut Vec<WidgetEvent>);

    /// Paints the widget.
    fn paint(&self, piet: &mut piet::Piet, region: &Region) -> Result<(), piet::Error>;

    ///
    fn rectangle(&self) -> &Rect;

    /// Removes all of the widget's child widgets.
    fn remove_all_children(&mut self) -> Result<(), WidgetError> {
        Err(WidgetError::NotHandled)
    }

    ///
    fn remove_child(&mut self, _widget_id: WidgetId) -> Result<(), WidgetError> {
        Err(WidgetError::NotHandled)
    }

    /// Returns the widget's selected value.
    fn selected_value(&self) -> Option<Box<dyn Any>> {
        None
    }

    ///
    fn set_child(
        &mut self,
        _column_index: usize,
        _row_index: usize,
        _child_widget: WidgetBox,
    ) -> Result<(), WidgetError> {
        Err(WidgetError::NotHandled)
    }

    ///
    fn set_debug_rendering(&mut self, debug_rendering: bool);

    /// Sets the widget's fill.
    fn set_fill(&mut self, _fill: Option<PaintBrush>) -> Result<(), WidgetError> {
        Err(WidgetError::NotHandled)
    }

    /// Sets the widget's font.
    fn set_font(&mut self, _font: Font) -> Result<(), WidgetError> {
        Err(WidgetError::NotHandled)
    }

    ///
    fn set_has_focus(&mut self, _has_focus: bool) -> Result<(), WidgetError> {
        Err(WidgetError::NotHandled)
    }

    /// Sets the widget's horizontal alignment.
    fn set_horizontal_alignment(
        &mut self,
        _horizontal_alignment: HorizontalAlignment,
    ) -> Result<(), WidgetError> {
        Err(WidgetError::NotHandled)
    }

    ///
    fn set_is_disabled(&mut self, is_disabled: bool);

    ///
    fn set_is_hidden(&mut self, is_hidden: bool);

    ///
    fn set_value(&mut self, _value: Box<dyn Any>) -> Result<(), WidgetError> {
        Err(WidgetError::NotHandled)
    }

    /// Sets the widget's origin.
    fn set_origin(&mut self, origin: Point);

    /// Sets the widget's stroke.
    fn set_stroke(&mut self, _stroke: Option<Stroke>) -> Result<(), WidgetError> {
        Err(WidgetError::NotHandled)
    }

    /// Sets the widget's vertical alignment.
    fn set_vertical_alignment(
        &mut self,
        _vertical_alignment: VerticalAlignment,
    ) -> Result<(), WidgetError> {
        Err(WidgetError::NotHandled)
    }

    /// Returns the widget's ID.
    fn widget_id(&self) -> &WidgetId;
}
